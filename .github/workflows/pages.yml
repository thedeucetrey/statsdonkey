name: Deploy static site to GitHub Pages
on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE: https://example.com   # update later when your API is hosted
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Show repo layout (debug)
        run: |
          echo "=== repo root ==="; ls -la
          echo "=== apps/web (if exists) ==="; ls -la apps/web || true

      - name: Detect working directory
        id: detect
        run: |
          if [ -f "apps/web/package.json" ]; then
            echo "workdir=apps/web" >> $GITHUB_OUTPUT
            echo "Detected apps/web package.json"
          elif [ -f "package.json" ]; then
            echo "workdir=." >> $GITHUB_OUTPUT
            echo "Detected root package.json"
          else
            echo "No package.json found at repo root or apps/web"; exit 1;
          fi

      # Use npm to avoid pnpm lockfile/cache noise
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm i --no-audit --no-fund
        working-directory: ${{ steps.detect.outputs.workdir }}

      - name: Verify Next config (debug)
        run: |
          echo "Contents of next.config.mjs (if present):"
          cat next.config.mjs || true
        working-directory: ${{ steps.detect.outputs.workdir }}

      - name: Build & export static site
        run: |
          set -euxo pipefail
          npx next build
          npx next export -o out
          cp out/index.html out/404.html        # SPA fallback
          touch out/.nojekyll                   # allow /_next on GH Pages
          echo "Export produced:"; ls -la out
        working-directory: ${{ steps.detect.outputs.workdir }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ steps.detect.outputs.workdir }}/out

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
